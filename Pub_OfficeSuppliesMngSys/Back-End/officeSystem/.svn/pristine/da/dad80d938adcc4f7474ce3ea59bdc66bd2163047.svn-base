package cn.fjnu.officeSystem.serviceImpl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.annotations.Param;

import cn.fjnu.officeSystem.dao.ItemProcurementDao;
import cn.fjnu.officeSystem.dao.PreItemProcurementDao;
import cn.fjnu.officeSystem.dao.ProcurementApplyDao;
import cn.fjnu.officeSystem.entity.PreItemProcurement;
import cn.fjnu.officeSystem.entity.ProcurementApply;
import cn.fjnu.officeSystem.extend.ItemProcurementExtend;
import cn.fjnu.officeSystem.extend.PreItemProcurementExtend;
import cn.fjnu.officeSystem.extend.ProcurementApplyExtend;
import cn.fjnu.officeSystem.utils.DateJsonValueProcessor;
import cn.fjnu.officeSystem.utils.PageUtil;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

public class ItemProcurementService {
	@Resource
	ItemProcurementDao itemProcurementDao;
	@Resource
	PreItemProcurementDao preItemProcurementDao;
	@Resource
	ProcurementApplyDao procurementApplyDao;

	// 采购申请首页
	public String getItemProcurementApplyHome(int pageIndex, int pageCount, String staffId, String itemTypeId,
			String itemName, String itemId, String preStartTimeStr, String preEndTimeStr, String applyTimeSort)
					throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date preStartTime = sdf.parse(preStartTimeStr);
		Date preEndTime = sdf.parse(preEndTimeStr);
		int count = 0;// 统计总记录条数
		String result = null;
		Map<String, Object> resultMap = new HashMap<>();
		count = preItemProcurementDao.selectUnAuditPreItemProcurementCountByMap(staffId, itemTypeId, itemName, itemId,
				preStartTime, preEndTime);
		if (count > 0) {
			PageUtil<ProcurementApplyExtend> page = new PageUtil<>(pageIndex, count, pageCount);
			List<ProcurementApplyExtend> resultList = procurementApplyDao.selectUnAuditProcurementApplyByMap(staffId,
					itemTypeId, itemName, itemId, preStartTime, preEndTime, applyTimeSort, page.getDataStart(),
					page.getDataEnd());
			resultMap.put("resultList", resultList);
			resultMap.put("pageSize", page.getPageSize());
			JsonConfig config = new JsonConfig();
			config.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));
			resultMap.put("pageIndex", pageIndex);
			JSONObject jsonObject = new JSONObject();
			result = jsonObject.fromObject(resultMap, config).toString();

		} else {
			return "{\"message\":\"nothing\"}";
		}

		return result;

	}

	// 不通过--填写预采购理由
	public String notPassItemProcurementApply(String applyId, String staffId, String reason) {
		ProcurementApply procurementApply = procurementApplyDao.selectProcurementApplyByapplyId(applyId);
		ProcurementApply procurementApply1 = new ProcurementApply();
		procurementApply1.setAuditStaffId(staffId);
		procurementApply1.setAuditTime(new Date());
		procurementApply1.setIsProcuremnet(new Short("0"));
		procurementApply1.setReason(reason);
		int result = procurementApplyDao.updateProcurementApply(procurementApply1);// 更新采购申请表的数据
		if (result == 1) {
			return "{\"message\":\"success\"}";

		} else {
			return "{\"message\":\"error\"}";
		}
	}

	// 确定预采购--将采购申请写入预采购清单
	public String confirmPreItemProcurement(String applyId, String staffId) {
		ProcurementApply procurementApply = procurementApplyDao.selectProcurementApplyByapplyId(applyId);
		ProcurementApply procurementApply1 = new ProcurementApply();
		procurementApply1.setAuditStaffId(staffId);
		procurementApply1.setAuditTime(new Date());
		procurementApply1.setIsProcuremnet(new Short("1"));
		procurementApplyDao.updateProcurementApply(procurementApply1);// 更新采购申请表的数据
		int isPre = preItemProcurementDao.updateIsApplyByMap(procurementApply1.getItemTypeId(),
				procurementApply1.getItemName(), procurementApply1.getMeasureUnitId(), procurementApply1.getNum());
		if (isPre == 0) {
			// 将采购申请写入预采购清单
			PreItemProcurement preItemProcurement = new PreItemProcurement();
			preItemProcurement.setItemId(procurementApply.getItemId());
			preItemProcurement.setItemName(procurementApply.getItemName());
			preItemProcurement.setItemTypeId(procurementApply.getItemTypeId());
			preItemProcurement.setMeasureUnitId(procurementApply.getMeasureUnitId());
			preItemProcurement.setNum(procurementApply.getNum());
			int result = preItemProcurementDao.insertPreItemProcurement(preItemProcurement);
			if (result == 1) {
				return "{\"message\":\"success\"}";

			} else {
				return "{\"message\":\"error\"}";
			}

		} else {
			return "{\"message\":\"success\"}";
		}

	}

	// 历史预采购清单
	public String getPreItemProcurementHome(int pageIndex, int pageCount, String staffId, String itemTypeId,
			String itemName, String itemId, String preTimeSort, String preStartTimestr, String preEndTimestr)
					throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date preStartTime = sdf.parse(preStartTimestr);
		Date preEndTime = sdf.parse(preEndTimestr);
		int count = 0;// 统计总记录条数
		String result = null;
		Map<String, Object> resultMap = new HashMap<>();
		count = preItemProcurementDao.selectUnAuditPreItemProcurementCountByMap(staffId, itemTypeId, itemName, itemId,
				preStartTime, preEndTime);
		if (count > 0) {
			PageUtil<PreItemProcurementExtend> page = new PageUtil<>(pageIndex, count, pageCount);
			List<PreItemProcurementExtend> resultList = preItemProcurementDao.selectUnAuditPreItemProcurementByMap(
					staffId, itemTypeId, itemName, itemId, preStartTime, preEndTime, preTimeSort, page.getDataStart(),
					page.getDataEnd());
			resultMap.put("resultList", resultList);
			resultMap.put("pageSize", page.getPageSize());
			JsonConfig config = new JsonConfig();
			config.registerJsonValueProcessor(Date.class, new DateJsonValueProcessor("yyyy-MM-dd hh:mm:ss"));
			resultMap.put("pageIndex", pageIndex);
			JSONObject jsonObject = new JSONObject();
			result = jsonObject.fromObject(resultMap, config).toString();

		} else {
			return "{\"message\":\"nothing\"}";
		}

		return result;

	}
	
	//点击采购、
	//已采购清单
	
	

}
